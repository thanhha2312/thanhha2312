-- 1. general (4-11)
select
    e.id as enrollment_id,
    e.enrollment_id as enrollment_code,
    c.ebb_subscriber_id as first_acp_subscriber_id,
    case 
        when c.ebb_status = 1 then 'pending'
        when c.ebb_status = 2 then 'inactive'
        when c.ebb_status = 3 then 'suspend'
        when c.ebb_status = 4 then 'active'
    else null end as first_acp_status,
    case
        when e.ebb_transaction_type = 0 then 'new'
        when e.ebb_transaction_type = 1 then 'enroll'
        when e.ebb_transaction_type = 2 then 'transfer'
    else null end as first_acp_transaction_type,
    c.lifeline_subscriber_id,
    case 
        when c.lifeline_status = 1 then 'pending'
        when c.lifeline_status = 2 then 'inactive'
        when c.lifeline_status = 3 then 'suspend'
        when c.lifeline_status = 4 then 'active'
    else null end as first_lifeline_status,
    case
        when e.lifeline_transaction_type = 0 then 'new'
        when e.lifeline_transaction_type = 1 then 'enroll'
        when e.lifeline_transaction_type = 2 then 'transfer'
    else null end as first_lifeline_transaction_type
from "prod_hth_structured_oss"."oss_airt_enrollments" e 
left join "prod_hth_structured_oss"."oss_airt_customers" c on c.enrollment_id = e.id 
limit 10
;

-- 2. claim (12-16) (21-22) (25-31)
with a as
(select
    etcgeneral as enrollment_id,
    subscriberid,
    rate as acp_rate,
    subscriberid as acp_subscriber_id,
    reasoncode,
    case when reasoncode like '%U%' then 'inactive' else 'active' end as acp_status,
    spin,
    sac,
    state,
    zip,
    tribalbenefitflag
from "prod_hth_claims_etl"."acp_claims_input_template_final" 
where year_month = '202307' limit 10
),
l as 
(select
    etcgeneral as enrollment_id,
    subscriberid,
    rate as lifeline_rate,
    subscriberid as lifeline_subscriber_id,
    reasoncode,
    case when reasoncode like '%U%' then 'inactive' else 'active' end as lifeline_status,
    spin,
    sac,
    state,
    zip,
    tribalbenefitflag
from "prod_hth_claims_etl"."lifeline_nlad_claims_input_template_final"
where year_month = '202307'
),
t as
(select 
    a.enrollment_id,
    a.acp_rate,
    l.lifeline_rate,
    a.acp_subscriber_id,
    l.lifeline_subscriber_id,
    case 
        when acp_subscriber_id is not null and lifeline_subscriber_id is not null then 'combo'
        when acp_subscriber_id is not null and lifeline_subscriber_id is null then 'acp'
        when acp_subscriber_id is null and lifeline_subscriber_id is not null then 'lifeline'
    else null end as final_enrollment_type,
    a.acp_status,
    l.lifeline_status,
    a.reasoncode as acp_reasoncode,
    l.reasoncode as lifeline_reasoncode,
    case
        when a.subscriberid is not null and l.subscriberid is not null and a.spin = l.spin then a.spin
        when a.subscriberid is not null and l.subscriberid is null then a.spin
        when a.subscriberid is null and l.subscriberid is not null then l.spin
    else null end as spin,
    a.sac as acp_sac,
    l.sac as lifeline_sac,
    case
        when a.subscriberid is not null and l.subscriberid is not null and a.state = l.state then a.state
        when a.subscriberid is not null and l.subscriberid is null then a.state
        when a.subscriberid is null and l.subscriberid is not null then l.state
    else null end as state,
    case
        when a.subscriberid is not null and l.subscriberid is not null and a.zip = l.zip then a.zip
        when a.subscriberid is not null and l.subscriberid is null then a.zip
        when a.subscriberid is null and l.subscriberid is not null then l.zip
    else null end as zip,
    case
        when a.subscriberid is not null and l.subscriberid is not null and a.tribalbenefitflag = l.tribalbenefitflag then a.tribalbenefitflag
        when a.subscriberid is not null and l.subscriberid is null then a.tribalbenefitflag
        when a.subscriberid is null and l.subscriberid is not null then l.tribalbenefitflag
    else null end as tribalbenefitflag,
    case
        when a.subscriberid is not null and l.subscriberid is not null and a.acp_status = 'active' and l.lifeline_status = 'active' then 'combo - claim'
        when a.subscriberid is not null and l.subscriberid is not null and a.acp_status = 'inactive' and l.lifeline_status = 'inactive' then 'combo - no claim'
        when a.subscriberid is not null and l.subscriberid is not null and a.acp_status = 'active' and l.lifeline_status = 'inactive' then 'acp - claim'
        when a.subscriberid is not null and l.subscriberid is not null and a.acp_status = 'inactive' and l.lifeline_status = 'active' then 'lifeline - claim'

        when a.subscriberid is not null and l.subscriberid is null and a.acp_status = 'active' then 'acp - claim'
        when a.subscriberid is not null and l.subscriberid is null and a.acp_status = 'inactive' then 'acp - no claim'

        when a.subscriberid is null and l.subscriberid is not null and l.lifeline_status = 'active' then 'lifeline - claim'
        when a.subscriberid is null and l.subscriberid is not null and l.lifeline_status = 'inactive' then 'lifeline - no claim'
    else 'no claim' end as is_claim
from a 
left join l on a.enrollment_id = l.enrollment_id
)

select
    t.*,
    case
        when is_claim = 'lifeline - claim' and final_enrollment_type = 'lifeline' and tribalbenefitflag = '1' then 34.25
        when is_claim = 'lifeline - claim' and final_enrollment_type = 'lifeline' and tribalbenefitflag = '0' then 9.25
        when is_claim = 'acp - claim' and final_enrollment_type = 'acp' and tribalbenefitflag = '1' then 75
        when is_claim = 'acp - claim' and final_enrollment_type = 'acp' and tribalbenefitflag = '0' then 30
        when is_claim = 'combo - claim' and final_enrollment_type = 'combo' and tribalbenefitflag = '1' then 109.25
        when is_claim = 'combo - claim' and final_enrollment_type = 'combo' and tribalbenefitflag = '0' then 39.25
    else null end as rev_claim
from t
;

-- 3.claim (17, 18)
select
    e.enrollment_id as enrollment_code,
    c.ebb_disconnected_date,
    a.etcgeneral,
    case 
        when a.etcgeneral is null and c.ebb_disconnected_date is not null and month(c.ebb_disconnected_date) < month(date('2023-07-01')) then c.ebb_disconnected_date
        when a.etcgeneral is null and c.ebb_disconnected_date is not null and month(c.ebb_disconnected_date) > month(date('2023-07-01')) then null
        when etcgeneral is null and ebb_disconnected_date is null then date('2023-07-01')
        when etcgeneral is not null then null
    end as acp_disconnect_date 
from "prod_hth_structured_oss"."oss_airt_customers" c 
left join "prod_hth_structured_oss"."oss_airt_enrollments" e on c.enrollment_id = e.id
left join "prod_hth_claims_etl"."acp_claims_input_template_final" a on e.enrollment_id = a.etcgeneral and a.year_month = '202307'
-- where a.etcgeneral is not null
-- where a.etcgeneral is null and c.ebb_disconnected_date is not null and month(c.ebb_disconnected_date) > month(date('2023-07-01'))
limit 10
;

-- 4. claim (19-20) (23-24)
select
    e.enrollment_id as enrollment_code,
    c.ebb_reconnected_date,
    a.etcgeneral,
    case 
        when a.etcgeneral is not null and c.ebb_reconnected_date is not null and month(c.ebb_reconnected_date) <= month(date('2023-07-31')) then c.ebb_reconnected_date
        when a.etcgeneral is not null and c.ebb_reconnected_date is not null and month(c.ebb_reconnected_date) > month(date('2023-07-31')) then null
        when a.etcgeneral is not null and c.ebb_reconnected_date is null then date('2023-07-01')
        when a.etcgeneral is null then null
    end as acp_connect_date,
    case 
        when phonenumber is not null then phonenumber
        when phonenumber is null and mdn_active is not null then mdn_active
        when phonenumber is null and mdn_active is null then null 
    end as acp_phone_number_active
from "prod_hth_structured_oss"."oss_airt_customers" c 
left join "prod_hth_structured_oss"."oss_airt_enrollments" e on c.enrollment_id = e.id
left join "prod_hth_claims_etl"."acp_claims_input_template_final" a on e.enrollment_id = a.etcgeneral and a.year_month = '202307'
-- where a.etcgeneral is not null
where a.etcgeneral is not null and c.ebb_reconnected_date is not null
-- where a.etcgeneral is null and c.ebb_disconnected_date is not null and month(c.ebb_disconnected_date) > month(date('2023-07-01'))
limit 10
;

-- 5. oss (32-35)
/*
SELECT
	enrollment_id,
	ebb_disconnected_reason AS acp_disconnect_reason_id,
	lifeline_disconnected_reason AS lifeline_disconnect_reason_id,
	b.reason AS acp_disconnect_reason_desc,
	c.reason AS lifeline_disconnect_reason_desc
FROM oss_customers a
LEFT JOIN oss_disconnection_reasons b on a.ebb_disconnected_reason = b.id
LEFT JOIN oss_disconnection_reasons c on a.ebb_disconnected_reason = c.id
WHERE ebb_disconnected_reason is not null 
LIMIT 10
*/

-- 6. carrier (36-51) 
with 
e AS
(SELECT
    e.enrollment_id,
    case when p.new_plan_code is not null then new_plan_code else plan_code end as plan_code,
    c.mdn_active
FROM "prod_hth_structured_oss"."oss_airt_customers" c 
LEFT JOIN "prod_hth_structured_oss"."oss_airt_enrollments" e on c.enrollment_id = e.id
LEFT JOIN "prod_hth_structured_oss"."oss_airt_plans" p on p.id = e.plan_id
WHERE e.enrollment_id = 'WAT1689603795'
),
pwg_snapshot AS
(SELECT distinct
    telephone_number as pwg_phone_number_active
FROM
(SELECT
      telephone_number,
      b.plan
    FROM "prod_cdrs_etl"."stg_pwg_snapshot" AS pw
    LEFT JOIN static.pwg_usage_plan_mapping AS b ON pw.debit_plan = b.debit_plan
    WHERE month_ ='07' AND year_ = '2023'
    AND telephone_number = '8282017506'
    -- limit 10 
  ) AS tmp
),
u1 as -- pwg usage
(SELECT
    cast(mdn as varchar) as mdn,
    cast(sum(data) as decimal(38,10)) as pwg_data,
    cast(sum(voice_mo) + sum(voice_mt) + sum(voice_cf) as decimal(38,10)) as pwg_voice,
    cast(sum(data) + sum(voice_mo) + sum(voice_mt) + sum(voice_cf) as decimal(38,10)) as pwg_usage
FROM "prod_cdrs_etl"."stg_pwg_usage_data_detail"
where year_ = '2023' and month_ = '07'
group by 1
),
p AS
(SELECT
    pwg_phone_number_active,
    case when pwg_usage > 0 then 'usage' else 'non-usage' end AS pwg_status_carrier,
    pwg_data,
    pwg_voice,
    pwg_usage
FROM pwg_snapshot p
LEFT JOIN u1 on p.pwg_phone_number_active = u1.mdn
),
att_snapshot AS
(SELECT DISTINCT
  mdn as att_phone_number_active
FROM "prod_cdrs_etl"."stg_eric_status_snapshots" AS a
INNER JOIN "static"."att_usage_plan_mapping" AS b ON a.service_class = b.service_class
WHERE
    year_ = '2023' and month_ = '07' and mdn = '8282017506'
limit 10
),
u2 as -- att usage
(SELECT
    cast(mdn as varchar) as mdn,
    cast(sum(case when record_type = 'Data' then total_volume_mb else 0 end) as decimal(38,10)) as att_data,
    cast(sum(case when record_type = 'VOICE' THEN total_duration_seconds ELSE 0 END) AS decimal(38, 10)) as att_voice,
    SUM(CASE WHEN record_type = 'SMS' THEN total_records ELSE 0 END) as att_sms,
    SUM(CASE WHEN record_type = 'MMS' THEN total_records ELSE 0 END) as att_mms
FROM "prod_cdrs_etl"."stg_eric_usage_summary"
where year_ = '2023' and month_ = '07'
group by 1
),
a AS
(SELECT
    att_phone_number_active,
    case when att_data + att_voice +  att_sms + att_mms > 0 then 'usage' else 'non-usage' end AS att_status_carrier,
    att_data,
    att_voice,
    att_sms,
    att_mms
FROM att_snapshot a
LEFT JOIN u2 on a.att_phone_number_active = u2.mdn
)
SELECT
    e.enrollment_id,
    e.plan_code as oss_plan_code,
    att_phone_number_active,
    pwg_phone_number_active,
    case 
        when att_phone_number_active is not null and  pwg_phone_number_active  is not null and att_phone_number_active =  pwg_phone_number_active then pwg_phone_number_active
        when att_phone_number_active is not null and  pwg_phone_number_active  is not null and att_phone_number_active !=  pwg_phone_number_active then 'att mdn & pwg mdn'
        when att_phone_number_active is not null and  pwg_phone_number_active  is null then att_phone_number_active 
        when att_phone_number_active is null and  pwg_phone_number_active  is not null then pwg_phone_number_active
    else null end as phone_number_active,
    att_status_carrier,
    pwg_status_carrier,
    att_data,
    pwg_data,
    att_data + pwg_data as data,
    att_voice,
    pwg_voice,
    att_sms,
    att_mms,
    pwg_usage
FROM e 
LEFT JOIN p ON e.mdn_active = p.pwg_phone_number_active
LEFT JOIN a ON e.mdn_active = a.att_phone_number_active
