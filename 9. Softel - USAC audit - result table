# 2. customer order
WITH t1 AS
# payment
(SELECT 
	c.id AS customer_id,
	e.id AS enrollment_id,
	e.upgraded_plan,
	f.id AS order_id,
	NULL AS order_description,
	f.provider,
	f.gross_amount,
	f.`status` AS order_status,
	DATE_FORMAT(f.created_at,"%Y-%m-%d") AS order_created_date,
	d.id AS order_item_id,
	d.product_name,
	d.product_type,
	d.product_price,
	CASE 
		WHEN e.upgraded_plan IN (34, 35, 36, 37) AND d.product_type = 'Plan' AND d.product_price = 12 THEN 'copay'
		ELSE 'other services' END AS is_copay_topup,
	'payment' AS service_payment_type
FROM oss_enrollments e
LEFT JOIN oss_customers c ON c.enrollment_id = e.id
LEFT JOIN oss_enrollment_payments f ON f.enrollment_id = e.id
LEFT JOIN oss_payment_details d ON d.enrollment_payment_id = f.id
WHERE f.`status` <> 'REFUNDS' AND f.gross_amount > 0 AND f.type <> 2 AND f.created_at >= '2022-01-01'
),
# order
t2 AS 
(SELECT
	c.id AS customer_id,
	c.enrollment_id,
	e.upgraded_plan,
	o.id AS order_id,
	o.name AS order_description,
	t.provider,
	t.gross_amount,
	t.`status` AS order_status,
	DATE_FORMAT(t.created_at,"%Y-%m-%d") AS order_created_date,
	d.id AS order_item_id,
	d.product_name,
	d.product_type,
	d.product_price,
	CASE 
		WHEN e.upgraded_plan IN (34, 35, 36, 37) AND d.product_type = 'Plan' AND d.product_price = 12 THEN 'copay'
		ELSE 'other services' END AS is_copay_topup,
	'order' AS service_payment_type
FROM oss_customers c
LEFT JOIN oss_enrollments e ON e.id = c.enrollment_id
LEFT JOIN oss_customer_orders o ON o.customer_id = c.id
LEFT JOIN oss_customer_order_transactions t ON t.customer_order_id = o.id
LEFT JOIN oss_customer_order_transaction_details d ON d.customer_order_transaction_id = t.id
WHERE o.type <>3 AND t.`status` <> 'REFUNDS' AND t.created_at >= '2022-01-01' AND t.gross_amount > 0 AND o.name NOT LIKE '%VCARE%'
),
# topup
t3 AS 
(SELECT
	c.id AS customer_id,
	c.enrollment_id,
	e.upgraded_plan,
	o.id AS order_id,
	o.name AS order_description,
	t.provider,
	t.gross_amount,
	t.`status` AS order_status,
	DATE_FORMAT(t.created_at,"%Y-%m-%d") AS order_created_date,
	i.id AS order_item_id,
	p.name AS product_name,
	p.plan_type AS product_type,
	0 AS product_price,
	CASE 
		WHEN p.id IN (20,22) THEN 'top_up'
		ELSE 'other services' END AS is_copay_topup,
	'top_up' AS service_payment_type
FROM oss_customers c
LEFT JOIN oss_enrollments e ON e.id = c.enrollment_id
LEFT JOIN oss_customer_orders o ON o.customer_id = c.id
LEFT JOIN oss_customer_order_transactions t ON t.customer_order_id = o.id
LEFT JOIN oss_customer_order_items i ON i.order_id = o.id
LEFT JOIN oss_plans p ON p.id = i.product_variant_id
WHERE o.type =3 AND t.`status` <> 'REFUNDS' AND t.created_at >= '2022-01-01' AND t.gross_amount > 0  AND o.name NOT LIKE '%VCARE%'
)
SELECT * FROM t1 UNION ALL SELECT * FROM t2 UNION ALL SELECT * FROM t3
;
# 3. enrollment - transaction
WITH t1 AS 
(SELECT
	ROW_NUMBER() OVER (PARTITION BY o.enrollment_id ORDER BY o.id ASC) AS row_no,
	o.enrollment_id,
	o.id AS transaction_id,
	o.etc_general_use,
	o.nlad_transaction_date,
	o.transaction_type
FROM oss_nlad_transactions o 
WHERE o.enrollment_type IN ('EBB', 'ACP') AND o.transaction_type IN ('TRANSFERIN','TRANSFEROUT')  AND o.nlad_transaction_date >= '2022-01-01' AND o.enrollment_id IS NOT NULL 
),
t2 AS
(SELECT 
	a.enrollment_id, 
	a.transaction_id, a.nlad_transaction_date, a.transaction_type, 
	b.transaction_id AS next_transaction_id, b.nlad_transaction_date AS next_nlad_transaction_date, b.transaction_type AS next_transaction_type
FROM t1 a
LEFT JOIN t1 b ON a.enrollment_id = b.enrollment_id  AND a.row_no = b.row_no - 1
WHERE b.nlad_transaction_date IS NOT NULL
ORDER BY 1
),
t3 AS
(SELECT * 
FROM t2
WHERE t2.transaction_type = 'TRANSFEROUT' AND t2.next_transaction_type = 'TRANSFERIN'
),
t4 AS
(SELECT 
	t3.*,
	a.exception_code,
	a.transfer_type,
	max(a.created_at) AS consent_date,
	a.source 
FROM t3
LEFT JOIN oss_transfer_agreements a ON t3.enrollment_id = a.enrollment_id AND DATE_FORMAT(a.created_at,"%y-%m-%d") >= t3.nlad_transaction_date AND DATE_FORMAT(a.created_at,"%y-%m-%d") <= t3.next_nlad_transaction_date
WHERE a.consent = 'YES' AND a.nlad_transaction_id IS NOT NULL AND a.transfer_type = 1
GROUP BY 1, 2
ORDER BY 1
),
t5 AS
(SELECT 
	t4.*,
	max(n.created_at) AS notification_date
FROM t4
LEFT JOIN oss_notification_transactions n ON t4.enrollment_id = n.enrollment_id AND DATE_FORMAT(n.created_at,"%y-%m-%d") >= t4.nlad_transaction_date AND n.created_at <= t4.consent_date
GROUP BY 1, 2
ORDER BY 1
),

t6 AS
(SELECT 
	t.id,
	t.enrollment_id,
	t.nlad_transaction_date,
	t.enrollment_type,
	t.transaction_type,
	t.transaction_effective_date,
	t.etc_general_use,
	t.subscriberid,
	t.tribal_benefit_flag,
	t.transfer_exception
FROM oss_nlad_transactions t 
WHERE t.enrollment_type IN ('EBB', 'ACP') AND t.nlad_transaction_date >= '2022-01-01' AND t.enrollment_id IS NOT NULL 
),

t7 AS
(SELECT DISTINCT
	t.enrollment_id,
	min(t.nlad_transaction_date) AS first_enroll_date,
	t.id AS first_enroll_transaction_id
FROM oss_nlad_transactions t 
WHERE t.enrollment_type IN ('EBB', 'ACP') AND t.nlad_transaction_date >= '2022-01-01' AND t.enrollment_id IS NOT NULL AND t.transaction_type = 'ENROLL'
GROUP BY 1
)

SELECT
	t6.*,
	CASE WHEN t6.id = t7.first_enroll_transaction_id AND t6.transaction_type = 'ENROLL' THEN 'first enroll'
			 WHEN t6.id <> t7.first_enroll_transaction_id AND t6.transaction_type = 'ENROLL' THEN 're-enroll'
			 ELSE 'others' END AS first_reenroll_status,
  CASE WHEN t6.id = t5.next_transaction_id THEN 'transferin-back'
			 ELSE 'others' END AS is_transferin_back,
  t5.consent_date,
	t5.source,
	t5.notification_date
FROM t6
LEFT JOIN t7 ON t7.first_enroll_transaction_id = t6.id 
LEFT JOIN t5 ON t5.next_transaction_id = t6.id 
